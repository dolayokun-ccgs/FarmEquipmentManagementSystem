generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(uuid())
  email                  String             @unique
  passwordHash           String?
  firstName              String?
  lastName               String?
  phoneNumber            String?
  state                  String?
  lga                    String?
  role                   String             @default("FARMER")
  provider               String             @default("LOCAL")
  providerId             String?
  isVerified             Boolean            @default(false)
  profileImage           String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  lastLogin              DateTime?
  bookings               Booking[]
  equipment              Equipment[]
  initiatedGroupBookings GroupBooking[]     @relation("GroupBookingInitiator")
  groupParticipations    GroupParticipant[]
  notifications          Notification[]
  reviews                Review[]

  @@index([email])
  @@index([role])
  @@index([state])
  @@map("users")
}

model Category {
  id            String      @id @default(uuid())
  name          String      @unique
  description   String?
  iconUrl       String?
  parentId      String?
  createdAt     DateTime    @default(now())
  parent        Category?   @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[]  @relation("CategoryToSubcategory")
  equipment     Equipment[]

  @@index([name])
  @@map("categories")
}

model Equipment {
  id              String         @id @default(uuid())
  ownerId         String
  name            String
  description     String?        @db.Text
  categoryId      String
  pricePerDay     Decimal        @db.Decimal(10, 2)
  currency        String         @default("NGN")
  condition       String         @default("GOOD")
  locationAddress String?        @db.Text
  locationCity    String?
  locationState   String?
  locationCountry String         @default("Nigeria")
  latitude        Decimal?       @db.Decimal(10, 8)
  longitude       Decimal?       @db.Decimal(11, 8)
  isAvailable     Boolean        @default(true)
  images          String?        @db.Text
  specifications  String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tags            String?        @db.Text
  bookings        Booking[]
  category        Category       @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groupBookings   GroupBooking[]
  reviews         Review[]

  @@index([ownerId])
  @@index([categoryId])
  @@index([locationState])
  @@index([isAvailable])
  @@index([pricePerDay])
  @@map("equipment")
}

model Booking {
  id                 String    @id @default(uuid())
  equipmentId        String
  farmerId           String
  startDate          DateTime
  endDate            DateTime
  totalDays          Int
  pricePerDay        Decimal   @db.Decimal(10, 2)
  totalPrice         Decimal   @db.Decimal(10, 2)
  status             String    @default("PENDING")
  paymentStatus      String    @default("PENDING")
  notes              String?   @db.Text
  cancellationReason String?   @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  confirmedAt        DateTime?
  cancelledAt        DateTime?
  equipment          Equipment @relation(fields: [equipmentId], references: [id], onUpdate: NoAction)
  farmer             User      @relation(fields: [farmerId], references: [id], onUpdate: NoAction)
  review             Review?

  @@index([equipmentId])
  @@index([farmerId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("bookings")
}

model Review {
  id          String    @id @default(uuid())
  bookingId   String    @unique
  equipmentId String
  reviewerId  String
  rating      Int
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  booking     Booking   @relation(fields: [bookingId], references: [id], onUpdate: NoAction)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onUpdate: NoAction)
  reviewer    User      @relation(fields: [reviewerId], references: [id], onUpdate: NoAction)

  @@index([equipmentId])
  @@index([reviewerId])
  @@index([rating])
  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String   @db.Text
  data      String?  @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model GroupBooking {
  id              String             @id @default(uuid())
  equipmentId     String
  initiatorId     String
  startDate       DateTime
  endDate         DateTime
  totalDays       Int
  pricePerDay     Decimal            @db.Decimal(10, 2)
  totalPrice      Decimal            @db.Decimal(10, 2)
  minParticipants Int                @default(2)
  maxParticipants Int                @default(10)
  status          String             @default("OPEN")
  isPublic        Boolean            @default(true)
  notes           String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  expiresAt       DateTime?
  confirmedAt     DateTime?
  cancelledAt     DateTime?
  equipment       Equipment          @relation(fields: [equipmentId], references: [id], onUpdate: NoAction)
  initiator       User               @relation("GroupBookingInitiator", fields: [initiatorId], references: [id], onUpdate: NoAction)
  participants    GroupParticipant[]

  @@index([equipmentId])
  @@index([status])
  @@index([initiatorId])
  @@index([startDate, endDate])
  @@index([isPublic])
  @@map("group_bookings")
}

model GroupParticipant {
  id               String       @id @default(uuid())
  groupBookingId   String
  farmerId         String
  shareAmount      Decimal      @db.Decimal(10, 2)
  paymentStatus    String       @default("PENDING")
  paymentReference String?      @unique
  joinedAt         DateTime     @default(now())
  paidAt           DateTime?
  notes            String?      @db.Text
  farmer           User         @relation(fields: [farmerId], references: [id], onUpdate: NoAction)
  groupBooking     GroupBooking @relation(fields: [groupBookingId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([groupBookingId, farmerId])
  @@index([groupBookingId])
  @@index([farmerId])
  @@index([paymentStatus])
  @@map("group_participants")
}
