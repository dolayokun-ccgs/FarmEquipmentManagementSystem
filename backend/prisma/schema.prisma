// Farm Equipment Management System - Prisma Schema
// Database: Microsoft SQL Server (Azure SQL Database)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?   // Null for OAuth users
  firstName     String?
  lastName      String?
  phoneNumber   String?
  state         String?   // Nigeria state code (e.g., LAG, OGN)
  lga           String?   // Local Government Area code
  role          String    @default("FARMER") // FARMER, PLATFORM_OWNER, ADMIN
  provider      String    @default("LOCAL") // LOCAL, GOOGLE, FACEBOOK, MICROSOFT
  providerId    String?   // OAuth provider ID
  isVerified    Boolean   @default(false)
  profileImage  String?   // Azure Blob URL

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  // Relations
  equipment      Equipment[]     // Equipment owned (for platform owners)
  bookings       Booking[]       // Bookings made (for farmers)
  reviews        Review[]
  notifications  Notification[]  // Notifications for this user

  @@index([email])
  @@index([role])
  @@index([state])
  @@map("users")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  iconUrl     String?
  parentId    String?     // For subcategories

  createdAt   DateTime    @default(now())

  // Relations
  parent        Category?   @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[]  @relation("CategoryToSubcategory")
  equipment     Equipment[]

  @@index([name])
  @@map("categories")
}

model Equipment {
  id              String    @id @default(uuid())
  ownerId         String
  name            String
  description     String?   @db.Text
  categoryId      String
  pricePerDay     Decimal   @db.Decimal(10, 2)
  currency        String    @default("NGN")
  condition       String    @default("GOOD") // EXCELLENT, GOOD, FAIR, POOR

  // Location
  locationAddress String?   @db.Text
  locationCity    String?
  locationState   String?
  locationCountry String    @default("Nigeria")
  latitude        Decimal?  @db.Decimal(10, 8)
  longitude       Decimal?  @db.Decimal(11, 8)

  isAvailable     Boolean   @default(true)
  images          String?   @db.Text // JSON string of array of Azure Blob URLs
  specifications  String?   @db.Text // JSON string of custom specs object
  tags            String?   @db.Text // JSON string of farming stage tags (land_preparation, planting, crop_management, harvesting, storage, post_harvest)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookings        Booking[]
  reviews         Review[]

  @@index([ownerId])
  @@index([categoryId])
  @@index([locationState])
  @@index([isAvailable])
  @@index([pricePerDay])
  @@map("equipment")
}

model Booking {
  id                  String    @id @default(uuid())
  equipmentId         String
  farmerId            String

  startDate           DateTime
  endDate             DateTime
  totalDays           Int
  pricePerDay         Decimal   @db.Decimal(10, 2)
  totalPrice          Decimal   @db.Decimal(10, 2)

  status              String    @default("PENDING") // PENDING, CONFIRMED, ACTIVE, COMPLETED, CANCELLED
  paymentStatus       String    @default("PENDING") // PENDING, PAID, REFUNDED

  notes               String?   @db.Text
  cancellationReason  String?   @db.Text

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  confirmedAt         DateTime?
  cancelledAt         DateTime?

  // Relations
  equipment           Equipment @relation(fields: [equipmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  farmer              User      @relation(fields: [farmerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review              Review?

  @@index([equipmentId])
  @@index([farmerId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("bookings")
}

model Review {
  id          String    @id @default(uuid())
  bookingId   String    @unique
  equipmentId String
  reviewerId  String
  rating      Int       // 1-5 stars
  comment     String?   @db.Text

  createdAt   DateTime  @default(now())

  // Relations
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviewer    User      @relation(fields: [reviewerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([equipmentId])
  @@index([reviewerId])
  @@index([rating])
  @@map("reviews")
}

model Notification {
  id          String    @id @default(uuid())
  userId      String
  type        String    // BOOKING_CREATED, BOOKING_CONFIRMED, BOOKING_CANCELLED, BOOKING_COMPLETED, PAYMENT_RECEIVED, etc.
  title       String
  message     String    @db.Text
  data        String?   @db.Text // JSON string for additional data (bookingId, etc.)
  isRead      Boolean   @default(false)

  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}
